#!/usr/bin/env python
# -*- coding: utf-8 -*-
#
# CAVEAT UTILITOR
# This file was automatically generated by Grako.
#    https://bitbucket.org/apalala/grako/
# Any changes you make to it will be overwritten the
# next time the file is generated.
#

from __future__ import print_function, division, absolute_import, unicode_literals
from grako.parsing import * # noqa
from grako.exceptions import * # noqa


__version__ = '14.119.18.31.41'


class wiktionaryParser(Parser):
    def __init__(self, whitespace=None, **kwargs):
        super(wiktionaryParser, self).__init__(whitespace=whitespace, **kwargs)

    @rule_def
    def _left_bracket_(self):
        self._token('[')

    @rule_def
    def _right_bracket_(self):
        self._token(']')

    @rule_def
    def _left_brackets_(self):
        self._token('[[')

    @rule_def
    def _right_brackets_(self):
        self._token(']]')

    @rule_def
    def _left_braces_(self):
        self._token('{{')

    @rule_def
    def _right_braces_(self):
        self._token('}}')

    @rule_def
    def _hash_char_(self):
        self._token('#')

    @rule_def
    def _vertical_bar_(self):
        self._token('|')

    @rule_def
    def _equals_(self):
        self._token('=')

    @rule_def
    def _bullet_(self):
        self._token('*')

    @rule_def
    def _colon_(self):
        self._token(':')

    @rule_def
    def _comma_(self):
        self._token(',')

    @rule_def
    def _semicolon_(self):
        self._token(';')

    @rule_def
    def _NEWLINE_(self):
        self._pattern(r'[ \t]*\n')

    @rule_def
    def _comment_(self):
        self._pattern(r'<!--(.|\n)+?-->')

    @rule_def
    def _term_(self):
        self._pattern(r'[^\[\]{}<>|:=\n]+')

    @rule_def
    def _safe_term_(self):
        with self._ifnot():
            self._bullet_()
        with self._ifnot():
            self._hash_char_()
        self._term_()

    @rule_def
    def _html_tag_(self):
        self._pattern(r'<[^>]+?>')

    @rule_def
    def _TEXT_(self):
        with self._choice():
            with self._option():
                self._safe_term_()
            with self._option():
                self._comment_()
            with self._option():
                self._html_tag_()
            with self._option():
                self._colon_()
            with self._option():
                self._equals_()
            with self._option():
                self._left_bracket_()
            with self._option():
                self._right_bracket_()
            self._error('no available options')

    @rule_def
    def _wiki_link_(self):
        self._left_brackets_()
        with self._optional():
            self._term_()
            self.ast['site'] = self.last_node
            self._colon_()
        self._term_()
        self.ast['target'] = self.last_node
        with self._optional():
            self._vertical_bar_()
            self._term_()
            self.ast['text'] = self.last_node
        self._right_brackets_()

    @rule_def
    def _linktext_(self):
        def block0():
            with self._choice():
                with self._option():
                    self._term_()
                with self._option():
                    self._html_tag_()
                with self._option():
                    self._colon_()
                with self._option():
                    self._equals_()
                self._error('no available options')
        self._positive_closure(block0)

    @rule_def
    def _url_(self):
        self._term_()
        self.ast['schema'] = self.last_node
        self._colon_()
        self._term_()
        self.ast['path'] = self.last_node

    @rule_def
    def _external_link_(self):
        self._left_bracket_()
        self._url_()
        self.ast['url'] = self.last_node
        with self._optional():
            self._linktext_()
            self.ast['text'] = self.last_node
        self._right_bracket_()

    @rule_def
    def _named_arg_(self):
        self._term_()
        self.ast['key'] = self.last_node
        self._equals_()
        self._wikitext_()
        self.ast['value'] = self.last_node

    @rule_def
    def _template_arg_(self):
        self._vertical_bar_()
        def block0():
            with self._choice():
                with self._option():
                    self._named_arg_()
                with self._option():
                    self._wikitext_()
                    self.ast['value'] = self.last_node
                self._error('no available options')
        self._closure(block0)

    @rule_def
    def _template_args_(self):
        def block0():
            self._template_arg_()
        self._positive_closure(block0)

    @rule_def
    def _template_(self):
        self._left_braces_()
        self._term_()
        self.ast['name'] = self.last_node
        with self._optional():
            self._template_args_()
            self.ast['args'] = self.last_node
        self._right_braces_()

    @rule_def
    def _translation_name_(self):
        self._pattern(r't[^\[\]{}|:=]{0,3}')

    @rule_def
    def _translation_template_(self):
        self._left_braces_()
        self._translation_name_()
        self._template_args_()
        self.ast['@'] = self.last_node
        self._right_braces_()

    @rule_def
    def _checktrans_top_template_(self):
        self._left_braces_()
        self._token('checktrans-top')
        self._right_braces_()

    @rule_def
    def _sensetrans_top_template_(self):
        self._left_braces_()
        self._token('trans-top')
        self._vertical_bar_()
        self._text_with_links_()
        self.ast['sense'] = self.last_node
        self._right_braces_()

    @rule_def
    def _trans_top_template_(self):
        def block0():
            with self._choice():
                with self._option():
                    self._checktrans_top_template_()
                    self.ast['checktrans'] = self.last_node
                with self._option():
                    self._sensetrans_top_template_()
                    self.ast['sensetrans'] = self.last_node
                self._error('no available options')
        self._closure(block0)

    @rule_def
    def _trans_mid_template_(self):
        self._left_braces_()
        self._token('trans-mid')
        self._right_braces_()

    @rule_def
    def _trans_bottom_template_(self):
        self._left_braces_()
        self._token('trans-bottom')
        self._right_braces_()

    @rule_def
    def _translation_entry_(self):
        def block0():
            with self._choice():
                with self._option():
                    self._translation_template_()
                with self._option():
                    self._text_with_links_()
                self._error('no available options')
        self._positive_closure(block0)

    @rule_def
    def _translation_content_(self):
        def block0():
            with self._choice():
                with self._option():
                    self._trans_mid_template_()
                with self._option():
                    self._translation_entry_()
                self._error('no available options')
        self._positive_closure(block0)

    @rule_def
    def _translation_block_(self):
        self._trans_top_template_()
        self._translation_content_()
        self.ast['@'] = self.last_node
        self._trans_bottom_template_()
        self._cut()

    @rule_def
    def _translation_section_(self):
        def block0():
            self._translation_block_()
        self._positive_closure(block0)

    @rule_def
    def _defn_line_(self):
        self._hash_char_()
        with self._ifnot():
            self._bullet_()
        self._wikitext_()
        self.ast['@'] = self.last_node

    @rule_def
    def _defn_details_(self):
        self._hash_char_()
        self._bullet_()
        self._wikitext_()
        self.ast['@'] = self.last_node

    @rule_def
    def _definition_(self):
        self._defn_line_()
        self.ast['defn'] = self.last_node
        def block1():
            self._defn_details_()
            self.ast.add_list('details', self.last_node)
        self._closure(block1)
        self._cut()

    @rule_def
    def _definition_section_(self):
        def block0():
            self._template_()
        self._closure(block0)
        def block1():
            self._definition_()
        self._positive_closure(block1)

    @rule_def
    def _text_with_links_(self):
        def block0():
            with self._choice():
                with self._option():
                    self._wiki_link_()
                with self._option():
                    self._TEXT_()
                self._error('no available options')
        self._positive_closure(block0)

    @rule_def
    def _wikitext_(self):
        def block0():
            with self._choice():
                with self._option():
                    self._template_()
                with self._option():
                    self._wiki_link_()
                with self._option():
                    self._external_link_()
                with self._option():
                    self._TEXT_()
                self._error('no available options')
        self._positive_closure(block0)


class wiktionarySemanticParser(CheckSemanticsMixin, wiktionaryParser):
    pass


class wiktionarySemantics(object):
    def left_bracket(self, ast):
        return ast

    def right_bracket(self, ast):
        return ast

    def left_brackets(self, ast):
        return ast

    def right_brackets(self, ast):
        return ast

    def left_braces(self, ast):
        return ast

    def right_braces(self, ast):
        return ast

    def hash_char(self, ast):
        return ast

    def vertical_bar(self, ast):
        return ast

    def equals(self, ast):
        return ast

    def bullet(self, ast):
        return ast

    def colon(self, ast):
        return ast

    def comma(self, ast):
        return ast

    def semicolon(self, ast):
        return ast

    def NEWLINE(self, ast):
        return ast

    def comment(self, ast):
        return ast

    def term(self, ast):
        return ast

    def safe_term(self, ast):
        return ast

    def html_tag(self, ast):
        return ast

    def TEXT(self, ast):
        return ast

    def wiki_link(self, ast):
        return ast

    def linktext(self, ast):
        return ast

    def url(self, ast):
        return ast

    def external_link(self, ast):
        return ast

    def named_arg(self, ast):
        return ast

    def template_arg(self, ast):
        return ast

    def template_args(self, ast):
        return ast

    def template(self, ast):
        return ast

    def translation_name(self, ast):
        return ast

    def translation_template(self, ast):
        return ast

    def checktrans_top_template(self, ast):
        return ast

    def sensetrans_top_template(self, ast):
        return ast

    def trans_top_template(self, ast):
        return ast

    def trans_mid_template(self, ast):
        return ast

    def trans_bottom_template(self, ast):
        return ast

    def translation_entry(self, ast):
        return ast

    def translation_content(self, ast):
        return ast

    def translation_block(self, ast):
        return ast

    def translation_section(self, ast):
        return ast

    def defn_line(self, ast):
        return ast

    def defn_details(self, ast):
        return ast

    def definition(self, ast):
        return ast

    def definition_section(self, ast):
        return ast

    def text_with_links(self, ast):
        return ast

    def wikitext(self, ast):
        return ast


def main(filename, startrule, trace=False, whitespace=None):
    import json
    with open(filename) as f:
        text = f.read()
    parser = wiktionaryParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace)
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()

if __name__ == '__main__':
    import argparse
    import string
    import sys

    class ListRules(argparse.Action):
        def __call__(self, parser, namespace, values, option_string):
            print('Rules:')
            for r in wiktionaryParser.rule_list():
                print(r)
            print()
            sys.exit(0)

    parser = argparse.ArgumentParser(description="Simple parser for wiktionary.")
    parser.add_argument('-l', '--list', action=ListRules, nargs=0,
                        help="list all rules and exit")
    parser.add_argument('-t', '--trace', action='store_true',
                        help="output trace information")
    parser.add_argument('-w', '--whitespace', type=str, default=string.whitespace,
                        help="whitespace specification")
    parser.add_argument('file', metavar="FILE", help="the input file to parse")
    parser.add_argument('startrule', metavar="STARTRULE",
                        help="the start rule for parsing")
    args = parser.parse_args()

    main(args.file, args.startrule, trace=args.trace, whitespace=args.whitespace)